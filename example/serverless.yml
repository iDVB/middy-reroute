service: middy-reroute-demo

frameworkVersion: ">=1.9.0 <2.0.0"

custom:
  vars: ${file(vars.yml):${opt:stage, self:provider.stage}, file(vars.yml):dev}
  scriptHooks:
    after:deploy:deploy:
      - sh ./scripts/deploy_static_files.sh ${self:custom.vars.STACKNAME} ${opt:aws-profile}
    before:remove:remove:
      - sh ./scripts/remove_static_files.sh ${self:custom.vars.STACKNAME} ${opt:aws-profile}
  lambdaAtEdge:
    retain: true

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  stackTags:
    STAGE: ${self:custom.vars.STAGE}
    SERVICE: ${self:service}

functions:
  originrequest:
    handler: functions/reroute/index.handler
    memorySize: 512
    timeout: 5
    role: RerouteRole
    lambdaAtEdge:
      - distribution: WebsiteDistribution
        eventType: origin-request
    package:
      include:
        - functions/reroute/**/*

resources:
  Description: middy-reroute-demo
  Conditions:
    isProd: { "Fn::Equals": ["${self:custom.vars.STAGE_FLAG}", "prod"] }
    isDev: { "Fn::Equals": ["${self:custom.vars.STAGE_FLAG}", "dev"] }
  Resources:
    CloudfrontOAI:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Created for ${self:custom.vars.STACKNAME}
    DefaultBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags: ${self:custom.vars.TAGS}
    BucketOne:
      Type: "AWS::S3::Bucket"
      Properties:
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags: ${self:custom.vars.TAGS}
    BucketTwo:
      Type: "AWS::S3::Bucket"
      Properties:
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags: ${self:custom.vars.TAGS}
    RerouteRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.vars.STACKNAME}-reroute
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.vars.STACKNAME}-reroute
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:ListBucket
                  Resource:
                    - {
                        "Fn::Join":
                          ["", ["arn:aws:s3:::", { Ref: DefaultBucket }]],
                      }
                    - {
                        "Fn::Join":
                          ["", ["arn:aws:s3:::", { Ref: DefaultBucket }, "/*"]],
                      }
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:Query
                    - dynamodb:DescribeStream
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:ListStreams
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:dynamodb:"
                          - { Ref: "AWS::Region" }
                          - ":"
                          - { Ref: "AWS::AccountId" }
                          - ":table/"
                          - ${self:custom.vars.TABLENAMEFORMAT}
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:dynamodb:"
                          - { Ref: "AWS::Region" }
                          - ":"
                          - { Ref: "AWS::AccountId" }
                          - ":table/"
                          - ${self:custom.vars.TABLENAMEFORMAT}
                          - "/index/*"
    BucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: { Ref: DefaultBucket }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  { "Fn::GetAtt": [CloudfrontOAI, S3CanonicalUserId] }
              Action:
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - {
                    "Fn::Join": ["", ["arn:aws:s3:::", { Ref: DefaultBucket }]],
                  }
                - {
                    "Fn::Join":
                      ["", ["arn:aws:s3:::", { Ref: DefaultBucket }, "/*"]],
                  }
    BucketOnePolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: { Ref: BucketOne }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - { "Fn::GetAtt": [RerouteRole, Arn] }
                CanonicalUser:
                  { "Fn::GetAtt": [CloudfrontOAI, S3CanonicalUserId] }
              Action:
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - { "Fn::Join": ["", ["arn:aws:s3:::", { Ref: BucketOne }]] }
                - {
                    "Fn::Join":
                      ["", ["arn:aws:s3:::", { Ref: BucketOne }, "/*"]],
                  }
    BucketTwoPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: { Ref: BucketTwo }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - { "Fn::GetAtt": [RerouteRole, Arn] }
                CanonicalUser:
                  { "Fn::GetAtt": [CloudfrontOAI, S3CanonicalUserId] }
              Action:
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - { "Fn::Join": ["", ["arn:aws:s3:::", { Ref: BucketTwo }]] }
                - {
                    "Fn::Join":
                      ["", ["arn:aws:s3:::", { Ref: BucketTwo }, "/*"]],
                  }
    WebsiteDistribution:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          Aliases: ${self:custom.vars.ALIASES}
          ViewerCertificate: ${self:custom.vars.VIEWER_CERT}
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_100
          IPV6Enabled: true
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
              Headers:
                - Host
                - CloudFront-Viewer-Country
                - Accept-Language
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            # PathPattern: String
            # SmoothStreaming: Boolean
            TargetOriginId: WebsiteBucketOrigin
            # TrustedSigners:
            #   - String
            ViewerProtocolPolicy: redirect-to-https
          Origins:
            - DomainName: { "Fn::GetAtt": [DefaultBucket, DomainName] }
              Id: WebsiteBucketOrigin
              S3OriginConfig:
                OriginAccessIdentity:
                  {
                    "Fn::Join":
                      [
                        "",
                        [
                          "origin-access-identity/cloudfront/",
                          { Ref: CloudfrontOAI },
                        ],
                      ],
                  }
        Tags: ${self:custom.vars.TAGS}
    DnsRecords:
      Condition: isProd
      Type: "AWS::Route53::RecordSetGroup"
      Properties:
        HostedZoneName: danvanbrunt.com.
        Comment: "DNS records associated with ${self:custom.vars.STACKNAME}"
        RecordSets:
          - Name: reroute.danvanbrunt.com
            Type: A
            AliasTarget:
              DNSName: { "Fn::GetAtt": WebsiteDistribution.DomainName }
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: red.danvanbrunt.com
            Type: A
            AliasTarget:
              DNSName: { "Fn::GetAtt": WebsiteDistribution.DomainName }
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: green.danvanbrunt.com
            Type: A
            AliasTarget:
              DNSName: { "Fn::GetAtt": WebsiteDistribution.DomainName }
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: blue.danvanbrunt.com
            Type: A
            AliasTarget:
              DNSName: { "Fn::GetAtt": WebsiteDistribution.DomainName }
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: origin-one.danvanbrunt.com
            Type: A
            AliasTarget:
              DNSName: { "Fn::GetAtt": WebsiteDistribution.DomainName }
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: origin-two.danvanbrunt.com
            Type: A
            AliasTarget:
              DNSName: { "Fn::GetAtt": WebsiteDistribution.DomainName }
              HostedZoneId: Z2FDTNDATAQYW2
    SSLCert:
      Condition: isProd
      Type: "AWS::CertificateManager::Certificate"
      Properties:
        DomainName: "reroute.danvanbrunt.com"
        SubjectAlternativeNames:
          - red.danvanbrunt.com
          - green.danvanbrunt.com
          - blue.danvanbrunt.com
          - origin-one.danvanbrunt.com
          - origin-two.danvanbrunt.com
    DomainMapTBL:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.vars.STACKNAME}-domainmap
        AttributeDefinitions:
          - AttributeName: Host
            AttributeType: S
        KeySchema:
          - AttributeName: Host
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

  Outputs:
    SiteUrl:
      Value:
        {
          "Fn::Join":
            [
              "",
              ["https://", { "Fn::GetAtt": [WebsiteDistribution, DomainName] }],
            ],
        }
      Description: URL of the website
    WebsiteBucket:
      Value: { Ref: DefaultBucket }
    BucketOne:
      Value: { Ref: BucketOne }
    BucketTwo:
      Value: { Ref: BucketTwo }
    DistributionId:
      Value: { Ref: WebsiteDistribution }
      Description: ID of the Website Distribution

plugins:
  - serverless-scriptable-plugin
  - serverless-plugin-cloudfront-lambda-edge

package:
  individually: true
  exclude:
    - "**/*"
